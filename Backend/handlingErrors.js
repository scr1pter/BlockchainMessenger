//Αυτά είναι ελάχιστα τροποποιημένα από το documentation για το error handling στο express.js https://expressjs.com/en/guide/error-handling.html. Δεν θα μπορούσαν να γίνουν και τα 2 σε ένα export, διότι το 1ο δέχεται μία μέθοδο ως παράμετρο και μετά την τρέχει για να 'πιαστεί' το τυχόν σφάλμα, ενώ το 2ο τρέχει σε κάθε σφάλμα που βγαίνει από requests στη βάση mongodb

//Σφάλματα εφαρμογής
//εδώ περνάμε αρχικά σαν παράμετρο fn κάποια μέθοδο του userController, όπως γίνεται στο userRouting. Αφού λοιπόν περάσουμε την μέθοδο τότε επιστρέφουμε μία συνάρτηση με 3 παραμέτρους request (που είναι το http request), το res (που είναι η απάντηση) και το next (που είναι η προκαθορισμένη default τεχνική/μέθοδος του express.js framework για να διαχειρίζονται αυτόματα τα σφάλματα, χωρίς την επέμβαση του χρήστη). Και μέσα σε αυτή την συνάρτηση γίνεται η διαχείριση των σφαλμάτων. 
exports.appErrors = (controllerMethod) => {
  return function (req, res, next) {
    //Όταν καλείται κάποια από τις 3 μεθόδους του userController και προκύψει error τότε τρέχει το παρακάτω. το σφάλμα 'πιάνεται' με το catch και αν είναι μορφής string επιστρέφεται το μήνυμα σφάλματος σαν response json αλλιώς διαχειρίζεται με την default μέθοδο next του express
    controllerMethod(req, res, next).catch((err) => {
      console.log(err);
      if (typeof err === "string") {
        res.status(400).json({
          message: err,
        });
      } else {
        next(err);
      }
    });
  };
};

//Σφάλματα βάσης δεδομένων mongodb
//περνάμε σαν παραμέτρους το err (που είναι το σφάλμα που θα προκύψει από κάποιο http request που φτάνει εν τέλει στη βάση μας), το request (που είναι το http request), το res (που είναι η απάντηση) και το next (που είναι η προκαθορισμένη default τεχνική/μέθοδος του express.js framework για να διαχειρίζονται αυτόματα τα σφάλματα, χωρίς την επέμβαση του χρήστη)
exports.mongodbErrors = (err, req, res, next) => {
  //αν το err δεν περιέχει κάποιο πεδίο/object errors (δηλαδή δεν είναι ξεκάθαρο ποιό ήταν το σφάλμα), τότε το περνάμε στην next μέθοδο και το διαχειρίζεται αυτή
  if (!err.errors) return next(err);
  //αλλιώς, βρίσκουμε τα keys του αντικειμένου errors, δηλαδή τα ονόματα των ιδιοτήτων του (που θα είναι 1 ή περισσότερα μηνύματα σφαλμάτων). αυτό επιστρέφεται με την μορφή πίνακα και μετά μπορούμε να έχουμε πρόσβαση στις τιμές κάνοντας ένα loop στον πίνακα αυτόν, όπως παρακάτω
  const errorKeys = Object.keys(err.errors);
  let message = "";
  //άρα τώρα για τον πίνακα αυτό των σφαλμάτων, θα πάρουμε το κάθε ένα από αυτά και θα δημιουργήσουμε ένα string με τα μηνύματα που περιέχουν
  errorKeys.forEach((key) => (message += err.errors[key].message + ", "));
  // παίρνω το string αφού πρώτα το κόψω, αφαιρώντας το τελευταίο ',' για αυτό βάζουμε το length - 2
  message = message.substr(0, message.length - 2);

  // και τελικά επιστρέφουμε το μήνυμα ως json που περιέχει όλα τα μηνύματα των σφαλμάτων, προσδιορίζοντας τον τύπο του response ως 400 / bad request και σταματάει η διαδικασία αυτή του request
  res.status(400).json({
    message,
  });
};